<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!DOCTYPE funcs
  SYSTEM '../../../clonk.dtd'>
<?xml-stylesheet type="text/xsl" href="../../../clonk.xsl"?>
<funcs>
  <func>
    <title>GetPlayer</title>
    <category>Player</category>
    <version>9.0 OC</version>
    <syntax>
      <rtype>proplist</rtype>
      <params>
        <param>
          <type>int</type>
          <name>player</name>
          <desc>Number of the player to get.</desc>
        </param>
      </params>
    </syntax>
    <desc>Returns the player proplist. If the specified player number is invalid, <code>nil</code> is returned.</desc>
    <text>
      <table>
        <caption id="PropertiesTable">Player Properties</caption>
        <rowh>
          <col>Name</col>
          <col>Data type</col>
          <col>Description</col>
        </rowh>
        <row>
          <col><code>ID</code></col>
          <col>int</col>
          <col>The player ID, see <funclink>GetPlayerID</funclink>, read-only.</col>
        </row>
        <row>
          <col><code>Name</code></col>
          <col>string</col>
          <col>Name of the player, read-only. See <funclink>GetName</funclink>, <funclink>GetPlayerName</funclink>.</col>
        </row>
        <row>
          <col><code>CrewSkin</code></col>
          <col>int</col>
          <col>The number of the crew skin/appearance from the player profile, read-only.</col>
        </row>
        <row>
          <col><code>Data</code></col>
          <col>proplist</col>
          <col>Storage space for all the player specific data for this scenario.</col>
        </row>
        <row>
          <col><code>ExtraID</code></col>
          <col>id</col>
          <col>The extra ID of a <emlink href="script/ScriptPlayers.html">Script Player</emlink>, is nil for user controlled players.</col>
        </row>
        <row>
          <col><code>InitialScore</code></col>
          <col>int</col>
          <col>The score value that was saved in the player profile at the beginning of the round, read-only. See <funclink>GetPlayerScoreGain</funclink>.</col>
        </row>
        <row>
          <col><code>Score</code></col>
          <col>int</col>
          <col>The current score of this player. See <funclink>GetPlayerScore</funclink>, <funclink>DoPlayerScore</funclink>.</col>
        </row>
        <row>
          <col><code>Type</code></col>
          <col>int</col>
          <col>Type of the player, read-only. See <a href="#PlayerTypesTable">Player Types</a>, <funclink>GetPlayerType</funclink></col>
        </row>
        <row>
          <col><code>ZoomLimit_MaxWidth</code></col>
          <col>int</col>
          <col>Maximum width of landscape in viewport, i.e. how far the player can view if zoomed out as far as possible. May be zero if <code>ZoomLimit_MaxHeight</code> is nonzero and zoom limits are determined by maximum view height only. See <funclink>GetPlayerZoomLimits</funclink>.</col>
        </row>
        <row>
          <col><code>ZoomLimit_MaxHeight</code></col>
          <col>int</col>
          <col>Maximum height of landscape in viewport. May be zero if <code>ZoomLimit_MaxWidth</code> is nonzero. See <funclink>GetPlayerZoomLimits</funclink>.</col>
        </row>
        <row>
          <col><code>ZoomLimit_MinWidth</code></col>
          <col>int</col>
          <col>Minimum width of landscape in viewport, i.e. how far the player can view if zoomed in as far as possible. May be zero if <code>ZoomLimit_MinHeight</code> is nonzero and zoom limits are determined by minimum view height only. See <funclink>GetPlayerZoomLimits</funclink>.</col>
        </row>
        <row>
          <col><code>ZoomLimit_MinHeight</code></col>
          <col>int</col>
          <col>Minimum height of landscape in viewport. May be zero if <code>ZoomLimit_MinWidth</code> is nonzero. See <funclink>GetPlayerZoomLimits</funclink>.</col>
        </row>
        <row>
          <col><code>ZoomLimit_MaxValue</code></col>
          <col>int</col>
          <col>Maximum zoom if set as a direct pixel-to-landscape correspondance value using <funclink>SetPlayerZoom</funclink> function. Zero if a direct zoom value is not specified. See <funclink>GetPlayerZoomLimits</funclink>.</col>
        </row>
        <row>
          <col><code>ZoomLimit_MinValue</code></col>
          <col>int</col>
          <col>Minimum zoom if set as a direct pixel-to-landscape correspondance value using <funclink>SetPlayerZoom</funclink> function. Zero if a direct zoom value is not specified. See <funclink>GetPlayerZoomLimits</funclink>.</col>
        </row>
      </table>
    </text>
      <table>
        <caption id="FunctionsTable">Player Functions</caption>
        <rowh>
          <col>Name</col>
          <col>Documentation / Deprecated Function</col>
        </rowh>
        <row>
          <col><code>Eliminate</code></col>
          <col><funclink>EliminatePlayer</funclink></col>
        </row>
        <row>
          <col><funclink>GetColor</funclink></col>
          <col><funclink>GetPlayerColor</funclink></col>
        </row>
        <row>
          <col><code>GetControlAssignment</code></col>
          <col><funclink>GetPlayerControlAssignment</funclink></col>
        </row>
        <row>
          <col><funclink>GetControlEnabled</funclink></col>
          <col>-</col>
        </row>
        <row>
          <col><code>GetControlState</code></col>
          <col><funclink>GetPlayerControlState</funclink></col>
        </row>
        <row>
          <col><funclink>GetCrew</funclink></col>
          <col><funclink>GetCrew</funclink></col>
        </row>
        <row>
          <col><funclink>GetCrewCount</funclink></col>
          <col><funclink>GetCrewCount</funclink></col>
        </row>
        <row>
          <col><funclink>GetCrewMembers</funclink></col>
          <col>-</col>
        </row>
        <row>
          <col><funclink>GetCursor</funclink></col>
          <col><funclink>GetCursor</funclink></col>
        </row>
        <row>
          <col><code>GetExtraData</code></col>
          <col><funclink>GetPlrExtraData</funclink></col>
        </row>
        <row>
          <col><funclink>GetHiRank</funclink></col>
          <col><funclink>GetHiRank</funclink></col>
        </row>
        <row>
          <col><code>GetTeam</code></col>
          <col><funclink>GetPlayerTeam</funclink></col>
        </row>
        <row>
          <col><funclink>GetViewCursor</funclink></col>
          <col>-</col>
        </row>
        <row>
          <col><code>GetViewMode</code></col>
          <col><funclink>GetPlrViewMode</funclink></col>
        </row>
        <row>
          <col><code>GetViewTarget</code></col>
          <col><funclink>GetPlrView</funclink></col>
        </row>
        <row>
          <col><funclink>ResetCursorView</funclink></col>
          <col>-</col>
        </row>
        <row>
          <col><funclink>SetControlEnabled</funclink></col>
          <col>-</col>
        </row>
        <row>
          <col><funclink>SetCursor</funclink></col>
          <col><funclink>SetCursor</funclink></col>
        </row>
        <row>
          <col><code>SetExtraData</code></col>
          <col><funclink>SetPlrExtraData</funclink></col>
        </row>
        <row>
          <col><funclink>SetFoW</funclink></col>
          <col><funclink>SetFoW</funclink></col>
        </row>
        <row>
          <col><code>SetTeam</code></col>
          <col><funclink>SetPlayerTeam</funclink></col>
        </row>
        <row>
          <col><funclink>SetViewCursor</funclink></col>
          <col>-</col>
        </row>
        <row>
          <col><code>SetViewLocked</code></col>
          <col><funclink>SetPlayerViewLock</funclink></col>
        </row>
        <row>
          <col><code>SetViewTarget</code></col>
          <col><funclink>SetPlrView</funclink></col>
        </row>
        <row>
          <col><funclink>Surrender</funclink></col>
          <col>-</col>
        </row>
      </table>
    </text>
    <text>
      <table>
        <caption id="PlayerTypesTable">Player Types</caption>
        <rowh>
          <col>Constant</col>
          <col>Value</col>
          <col>Description</col>
        </rowh>
        <row>
          <col>C4PT_User</col>
          <col>1</col>
          <col>User-controlled player.</col>
        </row>
        <row>
          <col>C4PT_Script</col>
          <col>2</col>
          <col>Script-controlled player; i.e. AI player.</col>
        </row>
      </table>
    </text>
    <examples>
      <example>
        <code>protected func InitializePlayer(int player)
  {
  // Is it a script player?
  if (GetPlayer(player).Type == C4PT_Script)
    // then create an AI controller object for that player
    <funclink>CreateObject</funclink>(SomeAIController, 50,50, player);
	return true;
  }</code>
        <text>Scenario script: when a script player joins, an object of definition SomeAIController is created (owned by the joining script player). This object might now control all clonks owned by this player.</text>
      </example>
      <example>
        <code>func ReduceSight(proplist player)
{
  SetPlayerZoomByViewRange(player.ID, player.ZoomLimit_MaxWidth/2, player.ZoomLimit_MaxHeight/2, PLRZOOM_LimitMax);
  return true;
}
</code>
        <text>Halves the view range of a player.</text>
      </example>
    </examples>
    <related>
      <emlink href="ScriptPlayers.html">Script Player</emlink>
      <funclink>CreateScriptPlayer</funclink>
    </related>
  </func>
  <author>Marky</author><date>2020-05</date>
</funcs>
